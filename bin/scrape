#! /usr/bin/env ruby
require 'net/http'
require 'rubygems'
require 'open-uri'
require 'model'
require 'hpricot'

BASE_URL = "http://www.pitchforkmedia.com/node/"

def log_exception(e, cid)
  puts "#{cid} : #{e.class} : #{e.message}"
end

def download(cid)
  begin
    url = "#{BASE_URL}#{cid}"
    puts "downloading #{url}" if cid % 100 == 0
    doc = Hpricot(open(url))
    content = get_content(cid, doc)
    if content
      save_content(content) 
    end
  rescue Exception => e
    log_exception(e, cid)
  end
end

def get_content(cid, doc)
  begin
    return false unless (doc/".rating").first
    full_title = (doc/"h2.fn").first.inner_html.strip
    artist = full_title.split(":").first
    title  = full_title.split(":").last.gsub(/<BR ?\/?>/i,'')
    rating = (doc/".rating").first.inner_html.strip.to_f
    review = (doc/".content.description").first.inner_html
    image_url = (doc/".photo img").first[:src]
    original_doc = doc.to_s
    return {
      :content_id     => cid,
      :full_title     => full_title,
      :artist         => artist,
      :title          => title,
      :rating         => rating,
      :review         => review,
      :image_url      => image_url,
      :review_summary => review.gsub(/<\/?[^>]*>/, "")[0..500],
      :original_doc   => doc.to_s
    }
  rescue Exception => e
    log_exception(e, cid)
    return false
  end
end

def save_content(content)
    begin 
      puts "saving #{content[:content_id]} : #{content[:artist]} : #{content[:title]} : #{content[:rating]}"
      Review.create(content)
    rescue Exception => e
      log_exception(e, content[:content_id])
    end
end

def download_content
  content_id = Review.maximum(:content_id) || 0
  threads = []
  started_at = Time.now
  while started_at > Time.now - 300
    if Thread.list.size <= 100
      threads << Thread.new(content_id) do |cid|
        begin
          download(cid)
        rescue Exception => e
          log_exception(e, cid)
        end
      end
      content_id+=1
    end
  end
end

download_content